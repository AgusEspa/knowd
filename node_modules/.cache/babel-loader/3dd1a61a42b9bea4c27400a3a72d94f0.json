{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth\n  } = useContext(AuthContext);\n  const baseURL = 'http://localhost:8080';\n  const axiosInstance = axios.create({\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async request => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return request; // const config = {\n    // \theaders: {\n    // \t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n    // \t}\n    // }\n\n    const response = await axios.get(\"/users/token/refresh\");\n    window.localStorage.setItem(\"access_token\", response.data.access_token);\n    setUserAuth(prevState => ({\n      username: prevState.username,\n      accessToken: response.data.access_token,\n      refreshToken: prevState.refreshToken\n    }));\n    request.headers.Authorization = `Bearer ${response.data.access_token}`;\n    return request;\n  }); // axios.interceptors.response.use(async response => {\n  // \tif (response.status === 200 ) return response;\n  // \tconst config = {\n  // \t\theaders: {\n  // \t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n  // \t\t}\n  // \t}\n  // \tconst newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n  // \twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n  // \tsetUserAuth(prevState => ( {\n  // \t\tusername: prevState.username,\n  // \t\taccessToken: newResponse.data.access_token,\n  // \t\trefreshToken: prevState.refreshToken\n  // \t}));\n  // \trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n  // \treturn request;\n  // });\n\n  return axiosInstance;\n};\n\n_s(useRefreshToken, \"dRy7P6vBdAhkDNVwznNO7obL4K8=\");\n\nexport default useRefreshToken;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useRefreshToken.js"],"names":["axios","jwt_decode","useContext","AuthContext","useRefreshToken","userAuth","setUserAuth","baseURL","axiosInstance","create","headers","accessToken","interceptors","request","use","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","response","get","window","localStorage","setItem","data","access_token","prevState","username","refreshToken","Authorization"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,UAAU,CAACC,WAAD,CAA5C;AAEH,QAAMI,OAAO,GAAG,uBAAhB;AAEA,QAAMC,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa;AAClCC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASL,QAAQ,CAACM,WAAY;AAAlD;AADyB,GAAb,CAAtB;AAKAH,EAAAA,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMD,OAAN,IAAiB;AAEvD,UAAME,YAAY,GAAGd,UAAU,CAACI,QAAQ,CAACM,WAAV,CAA/B;AACA,UAAMK,mBAAmB,GAAGD,YAAY,CAACE,GAAzC;AACA,UAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C;AAEA,UAAMC,OAAO,GAAGL,mBAAmB,GAAGE,WAAtC;AAEA,QAAIG,OAAJ,EAAa,OAAOR,OAAP,CAR0C,CAUvD;AACA;AACA;AACA;AACA;;AAEA,UAAMS,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAU,sBAAV,CAAvB;AAEAC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,QAAQ,CAACK,IAAT,CAAcC,YAA1D;AAEAtB,IAAAA,WAAW,CAACuB,SAAS,KAAM;AAC1BC,MAAAA,QAAQ,EAAED,SAAS,CAACC,QADM;AAE1BnB,MAAAA,WAAW,EAAEW,QAAQ,CAACK,IAAT,CAAcC,YAFD;AAG1BG,MAAAA,YAAY,EAAEF,SAAS,CAACE;AAHE,KAAN,CAAV,CAAX;AAMAlB,IAAAA,OAAO,CAACH,OAAR,CAAgBsB,aAAhB,GAAiC,UAASV,QAAQ,CAACK,IAAT,CAAcC,YAAa,EAArE;AACA,WAAOf,OAAP;AAEA,GA7BD,EAX6B,CA0C7B;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEG,SAAOL,aAAP;AACH,CApED;;GAAMJ,e;;AAsEN,eAAeA,eAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n\n    const { userAuth, setUserAuth } = useContext(AuthContext);\n\n\tconst baseURL = 'http://localhost:8080';\n\n\tconst axiosInstance = axios.create({\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n  \n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif (isValid) return request;\n\n\t\t// const config = {\n\t\t// \theaders: {\n\t\t// \t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t// \t}\n\t\t// }\n\n\t\tconst response = await axios.get(\"/users/token/refresh\");\n\t\t\t\t\n\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t\tsetUserAuth(prevState => ( {\n\t\t\tusername: prevState.username,\n\t\t\taccessToken: response.data.access_token,\n\t\t\trefreshToken: prevState.refreshToken\n\t\t}));\n\t\t\n\t\trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t\treturn request;\n\n\t});\n\n\t// axios.interceptors.response.use(async response => {\n\n\t// \tif (response.status === 200 ) return response;\n\n\t// \tconst config = {\n\t// \t\theaders: {\n\t// \t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t// \t\t}\n\t// \t}\n\n\t// \tconst newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n\t\t\t\t\n\t// \twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t// \tsetUserAuth(prevState => ( {\n\t// \t\tusername: prevState.username,\n\t// \t\taccessToken: newResponse.data.access_token,\n\t// \t\trefreshToken: prevState.refreshToken\n\t// \t}));\n\t\t\n\t// \trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t// \treturn request;\n\n\t// });\n    \n    return axiosInstance;\n}\n\nexport default useRefreshToken;"]},"metadata":{},"sourceType":"module"}