{"ast":null,"code":"var _jsxFileName = \"/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPassword = () => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    newPassword: \"\",\n    passwordVerification: \"\"\n  });\n  const [formValidationErrors, setFormValidationErrors] = useState({\n    password: \"\",\n    passwordVerification: \"\"\n  });\n  const [networkError, setNetworkError] = useState(\"\");\n  const [isDone, setIsDone] = useState(false);\n  const [passwordHelperDisplay, setPasswordHelperDisplay] = useState(false);\n  const navigate = useNavigate();\n  const baseUrl = \"http://localhost:8080/api\";\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const validateForm = data => {\n    const errors = {\n      newPassword: \"\",\n      passwordVerification: \"\"\n    };\n\n    if (!data.newPassword) {\n      errors.newPassword = \"Password is required\";\n    } else if (data.newPassword.length < 8) {\n      errors.newPassword = \"Password must be at least 8 characters long\";\n    }\n\n    if (!data.passwordVerification) {\n      errors.passwordVerification = \"Plese re-enter the password\";\n    } else if (data.newPassword !== data.passwordVerification) {\n      errors.passwordVerification = \"Passwords don't match\";\n    }\n\n    setFormValidationErrors(errors);\n    return errors;\n  };\n\n  const handlePasswordReset = async event => {\n    event.preventDefault();\n    const validationErrors = validateForm(formData);\n\n    if (validationErrors.newPassword === \"\" && validationErrors.passwordVerification === \"\") {\n      const params = new URLSearchParams(window.location.search);\n      const token = params.get(\"token\");\n      const requestBody = {\n        newPassword: formData.newPassword,\n        passwordToken: token\n      };\n      setFormValidationErrors({\n        newPassword: \"\",\n        passwordVerification: \"\"\n      });\n      setNetworkError(\"\");\n\n      try {\n        await axios.put(`${baseUrl}/users/reset_password`, requestBody);\n        setIsDone(true);\n        await new Promise(resolve => setTimeout(resolve, 4000));\n        navigate(\"/login\");\n      } catch (error) {\n        if (!error.response || error.response.status >= 500) {\n          setNetworkError(\"Unable to contact the server. Please try again later.\");\n        } else if (error.response.status) {\n          if (error.response.data.includes(\"email\")) setFormValidationErrors(prevState => ({ ...prevState,\n            emailAddress: error.response.data\n          }));\n        } else setNetworkError(error.response.data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"register-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-box\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"logo\",\n          src: \"./logo.png\",\n          alt: \"self.OKRs logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handlePasswordReset,\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"New Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"./info.png\",\n            alt: \"information icon\",\n            onMouseEnter: () => setPasswordHelperDisplay(true),\n            onMouseLeave: () => setPasswordHelperDisplay(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), passwordHelperDisplay && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"password-helper\",\n            children: \"Password must have at least 8 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), formValidationErrors.newPassword !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"validation-error\",\n            type: \"password\",\n            name: \"newPassword\",\n            value: formData.newPassword,\n            onChange: handleFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"validation-error-message\",\n            children: formValidationErrors.newPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"newPassword\",\n          value: formData.newPassword,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Confirm password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), formValidationErrors.passwordVerification !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"validation-error\",\n            type: \"password\",\n            name: \"passwordVerification\",\n            value: formData.passwordVerification,\n            onChange: handleFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"validation-error-message\",\n            children: formValidationErrors.passwordVerification\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"passwordVerification\",\n          value: formData.passwordVerification,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), networkError !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"registration-error-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: networkError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), isDone && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"successful-registration\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your password was reset succesfully.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Redirecting to login...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ResetPassword, \"hM65vjfGOo117DmFACc91/6RP60=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/ResetPassword.js"],"names":["useState","axios","useNavigate","ResetPassword","formData","setFormData","newPassword","passwordVerification","formValidationErrors","setFormValidationErrors","password","networkError","setNetworkError","isDone","setIsDone","passwordHelperDisplay","setPasswordHelperDisplay","navigate","baseUrl","handleFormChange","event","name","value","target","prevState","validateForm","data","errors","length","handlePasswordReset","preventDefault","validationErrors","params","URLSearchParams","window","location","search","token","get","requestBody","passwordToken","put","Promise","resolve","setTimeout","error","response","status","includes","emailAddress"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ResetPassword = () => {\n\n    const [formData, setFormData] = useState({newPassword: \"\", passwordVerification:\"\"});\n    const [formValidationErrors, setFormValidationErrors] = useState({password: \"\", passwordVerification:\"\"});\n    const [networkError, setNetworkError] = useState(\"\");\n    const [isDone, setIsDone] = useState(false);\n\tconst [passwordHelperDisplay, setPasswordHelperDisplay] = useState(false);\n\tconst navigate = useNavigate();\n\n\tconst baseUrl = \"http://localhost:8080/api\";\n\n\tconst handleFormChange = (event) => {\n        const {name, value} = event.target;\n        setFormData( prevState => ({\n            ...prevState,\n            [name]: value \n        }));\n    }\n\n    const validateForm = (data) => {\n        const errors = {newPassword: \"\", passwordVerification:\"\"};\n\n        if (!data.newPassword) {\n            errors.newPassword = \"Password is required\";\n        } else if (data.newPassword.length < 8) {\n            errors.newPassword = \"Password must be at least 8 characters long\";\n        }\n\n        if (!data.passwordVerification) {\n            errors.passwordVerification = \"Plese re-enter the password\";\n        } else if (data.newPassword !== data.passwordVerification) {\n            errors.passwordVerification = \"Passwords don't match\";\n        }\n\n        setFormValidationErrors(errors);\n        return errors;\n    }\n\n  \tconst handlePasswordReset = async (event) => {\n\t\tevent.preventDefault();\n\n        const validationErrors = validateForm(formData);\n\n        if (validationErrors.newPassword === \"\" && validationErrors.passwordVerification === \"\") {\n\n            const params = new URLSearchParams(window.location.search);\n            const token = params.get(\"token\");\n        \n            const requestBody = {newPassword: formData.newPassword, \n                passwordToken: token};\n\n                setFormValidationErrors({newPassword: \"\", passwordVerification:\"\"});\n                setNetworkError(\"\");\n\n            try {\n                await axios.put(`${baseUrl}/users/reset_password`, requestBody);\n                setIsDone(true);\n                await new Promise(resolve => setTimeout(resolve, 4000));\n                navigate(\"/login\");\n            } catch (error) {\n                if (!error.response || error.response.status >= 500) {\n                    setNetworkError(\"Unable to contact the server. Please try again later.\");\n                } else if (error.response.status) {\n                    if (error.response.data.includes(\"email\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        emailAddress: error.response.data \n                    }));\n                } else setNetworkError(error.response.data);     \n            } \n        }\n  \t}\n\n\n\treturn (\n\t\t<main className=\"register-container\">\n            <div className=\"register-box\">\n                <div className=\"logo-box\">\n\t\t\t\t\t<img className=\"logo\" src={\"./logo.png\"} alt=\"self.OKRs logo\"/>\n\t\t\t\t</div>  \n\n                <form onSubmit={handlePasswordReset} noValidate>\n\n                    <div className=\"password\">\n                        <label>New Password:</label>\n                        <img src={\"./info.png\"} alt=\"information icon\"\n                            onMouseEnter={() => setPasswordHelperDisplay(true)}\n        \t\t\t\t    onMouseLeave={() => setPasswordHelperDisplay(false)} />\n                        {passwordHelperDisplay && <span className=\"password-helper\">Password must have at least 8 characters</span>}\n                    </div>\n                    {formValidationErrors.newPassword !== \"\" ?\n                    <div> \n                        <input id=\"validation-error\" type=\"password\" \n                        name=\"newPassword\"\n                        value={formData.newPassword}\n                        onChange={handleFormChange}\n                        />\n                        <p id=\"validation-error-message\">{formValidationErrors.newPassword}</p>\n                    </div> :\n                    <input type=\"password\" \n                    name=\"newPassword\"\n                    value={formData.newPassword}\n                    onChange={handleFormChange}\n                    />\n                    }\n\n                    <label>Confirm password:</label>\n                    {formValidationErrors.passwordVerification !== \"\" ?\n                    <div> \n                        <input id=\"validation-error\" type=\"password\" \n                        name=\"passwordVerification\"\n                        value={formData.passwordVerification}\n                        onChange={handleFormChange}\n                        />\n                        <p id=\"validation-error-message\">{formValidationErrors.passwordVerification}</p>\n                    </div> :\n                    <input type=\"password\" \n                    name=\"passwordVerification\"\n                    value={formData.passwordVerification}\n                    onChange={handleFormChange}\n                    />\n                    }\n                    \n                    <button>Create account</button>\n                    {networkError !== \"\" && \n                    <div className=\"registration-error-message\">\n                        <p>{networkError}</p>\n                    </div>}\n                    {isDone && \n                    <div className=\"successful-registration\">\n                    <p>Your password was reset succesfully.</p>\n                    <p>Redirecting to login...</p>\n                    </div>}\n\n                </form>\n\n                \n            </div>\n        </main>\n\t)\n}\n\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}