{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth\n  } = useContext(AuthContext);\n  const baseURL = 'http://localhost:8080';\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async request => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return request;\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${userAuth.refreshToken}`\n      }\n    };\n    const response = await axios.get(\"http://localhost:8080/api/users/token/refresh\", config);\n    window.localStorage.setItem(\"access_token\", response.data.access_token);\n    setUserAuth(prevState => ({\n      username: prevState.username,\n      accessToken: response.data.access_token,\n      refreshToken: prevState.refreshToken\n    }));\n    request.headers.Authorization = `Bearer ${response.data.access_token}`;\n    return request;\n  }, error => {\n    return Promise.reject(error);\n  }); // axios.interceptors.response.use(function (response) {\n  // \t// Any status code that lie within the range of 2xx cause this function to trigger\n  // \t// Do something with response data\n  // \treturn response;\n  //   }, function (error) {\n  // \t// Any status codes that falls outside the range of 2xx cause this function to trigger\n  // \t// Do something with response error\n  // \treturn Promise.reject(error);\n  //   });\n  // axios.interceptors.response.use(async response => {\n  // \treturn response; \n  // \t}, (async error => {\n  // \t\tconst config = {\n  // \t\t\theaders: {\n  // \t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n  // \t\t\t}\n  // \t\t}\n  // \t\tconst newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n  // \t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n  // \t\tsetUserAuth(prevState => ( {\n  // \t\t\tusername: prevState.username,\n  // \t\t\taccessToken: newResponse.data.access_token,\n  // \t\t\trefreshToken: prevState.refreshToken\n  // \t\t}));\n  // \t\trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n  // \t\treturn request;\n  // });\n\n  return axiosInstance;\n};\n\n_s(useRefreshToken, \"dRy7P6vBdAhkDNVwznNO7obL4K8=\");\n\nexport default useRefreshToken;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useRefreshToken.js"],"names":["axios","jwt_decode","useContext","AuthContext","useRefreshToken","userAuth","setUserAuth","baseURL","axiosInstance","create","timeout","headers","accessToken","interceptors","request","use","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","config","refreshToken","response","get","window","localStorage","setItem","data","access_token","prevState","username","Authorization","error","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,UAAU,CAACC,WAAD,CAA5C;AAEH,QAAMI,OAAO,GAAG,uBAAhB;AAEA,QAAMC,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa;AAClCF,IAAAA,OAAO,EAAEA,OADyB;AAElCG,IAAAA,OAAO,EAAE,KAFyB;AAGlCC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASN,QAAQ,CAACO,WAAY;AAAlD;AAHyB,GAAb,CAAtB;AAMAJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMD,OAAN,IAAiB;AAEvD,UAAME,YAAY,GAAGf,UAAU,CAACI,QAAQ,CAACO,WAAV,CAA/B;AACA,UAAMK,mBAAmB,GAAGD,YAAY,CAACE,GAAzC;AACA,UAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C;AAEA,UAAMC,OAAO,GAAGL,mBAAmB,GAAGE,WAAtC;AAEA,QAAIG,OAAJ,EAAa,OAAOR,OAAP;AAEb,UAAMS,MAAM,GAAG;AACdZ,MAAAA,OAAO,EAAE;AACR,yBAAkB,UAASN,QAAQ,CAACmB,YAAa;AADzC;AADK,KAAf;AAMA,UAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,+CAAV,EAA2DH,MAA3D,CAAvB;AAEAI,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,QAAQ,CAACK,IAAT,CAAcC,YAA1D;AAEAzB,IAAAA,WAAW,CAAC0B,SAAS,KAAM;AAC1BC,MAAAA,QAAQ,EAAED,SAAS,CAACC,QADM;AAE1BrB,MAAAA,WAAW,EAAEa,QAAQ,CAACK,IAAT,CAAcC,YAFD;AAG1BP,MAAAA,YAAY,EAAEQ,SAAS,CAACR;AAHE,KAAN,CAAV,CAAX;AAMAV,IAAAA,OAAO,CAACH,OAAR,CAAgBuB,aAAhB,GAAiC,UAAST,QAAQ,CAACK,IAAT,CAAcC,YAAa,EAArE;AACA,WAAOjB,OAAP;AAEA,GA7BD,EA6BGqB,KAAK,IAAI;AACX,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACA,GA/BD,EAZ6B,CA6C7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEG,SAAO3B,aAAP;AACH,CAlFD;;GAAMJ,e;;AAoFN,eAAeA,eAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n\n    const { userAuth, setUserAuth } = useContext(AuthContext);\n\n\tconst baseURL = 'http://localhost:8080';\n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif (isValid) return request;\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t}\n\t\t}\n\n\t\tconst response = await axios.get(\"http://localhost:8080/api/users/token/refresh\", config);\n\t\t\t\t\n\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t\tsetUserAuth(prevState => ( {\n\t\t\tusername: prevState.username,\n\t\t\taccessToken: response.data.access_token,\n\t\t\trefreshToken: prevState.refreshToken\n\t\t}));\n\t\t\n\t\trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t\treturn request;\n\n\t}, error => {\n\t\treturn Promise.reject(error);\n\t});\n\n\t// axios.interceptors.response.use(function (response) {\n\t// \t// Any status code that lie within the range of 2xx cause this function to trigger\n\t// \t// Do something with response data\n\t// \treturn response;\n\t//   }, function (error) {\n\t// \t// Any status codes that falls outside the range of 2xx cause this function to trigger\n\t// \t// Do something with response error\n\t// \treturn Promise.reject(error);\n\t//   });\n\n\t// axios.interceptors.response.use(async response => {\n\n\t// \treturn response; \n\n\t// \t}, (async error => {\n\n\t// \t\tconst config = {\n\t// \t\t\theaders: {\n\t// \t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tconst newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n\t\t\t\t\t\n\t// \t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t// \t\tsetUserAuth(prevState => ( {\n\t// \t\t\tusername: prevState.username,\n\t// \t\t\taccessToken: newResponse.data.access_token,\n\t// \t\t\trefreshToken: prevState.refreshToken\n\t// \t\t}));\n\t\t\t\n\t// \t\trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t// \t\treturn request;\n\t// });\n    \n    return axiosInstance;\n}\n\nexport default useRefreshToken;"]},"metadata":{},"sourceType":"module"}