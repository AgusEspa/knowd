{"ast":null,"code":"var _jsxFileName = \"/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/Settings.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport useAxios from \"../utils/useAxios\";\nimport NavBar from \"../components/Dashboard/Navbar/Navbar\";\nimport Notification from \"../components/Dashboard/Notification\";\nimport DeleteModal from \"../components/Settings/DeleteModal\";\nimport styles from \"../styles/Settings.module.scss\";\nimport resources from \"../styles/Resources.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Settings = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth,\n    logout\n  } = useContext(AuthContext);\n  const [formData, setFormData] = useState({\n    username: userAuth.username,\n    emailAddress: userAuth.emailAddress,\n    oldPassword: \"\",\n    newPassword: \"\",\n    passwordVerification: \"\"\n  });\n  const [deleteFormData, setDeleteFormData] = useState({\n    emailAddress: \"\",\n    oldPassword: \"\"\n  });\n  const [credentialsError, setCredentialsError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [buttonIsEnabled, setButtonIsEnabled] = useState(true);\n  const [formValidationErrors, setFormValidationErrors] = useState({\n    username: \"\",\n    emailAddress: \"\",\n    oldPassword: \"\",\n    newPassword: \"\",\n    passwordVerification: \"\"\n  });\n  const [toggleUsername, setToggleUsername] = useState(false);\n  const [togglePassword, setTogglePassword] = useState(false);\n  const [toggleDelete, setToggleDelete] = useState(false);\n  const [notification, setNotification] = useState({\n    message: \"\",\n    type: \"\"\n  });\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const api = useAxios();\n  useEffect(() => {\n    getCredentials();\n  }, []);\n\n  const getCredentials = async () => {\n    try {\n      const response = await api.get(\"/users/authenticated\");\n      setUserAuth(prevState => ({ ...prevState,\n        username: response.data.username,\n        emailAddress: response.data.emailAddress\n      }));\n    } catch (error) {\n      setNotification(prevState => ({\n        message: \"Unable to verify identity. Loging out...\",\n        type: \"error\"\n      }));\n      await new Promise(resolve => setTimeout(resolve, 6000));\n      setNotification(prevState => ({\n        message: \"\",\n        type: \"\"\n      }));\n      logout();\n    }\n  };\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const handleDeleteFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setDeleteFormData(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const validateDetailsForm = data => {\n    const errors = {\n      username: \"\",\n      emailAddress: \"\",\n      oldPassword: \"\"\n    };\n    setFormValidationErrors(errors);\n    const emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (!data.emailAddress) {\n      errors.emailAddress = \"Email address is required\";\n    } else if (!emailPattern.test(data.emailAddress)) {\n      errors.emailAddress = \"Please enter a valid email address\";\n    }\n\n    if (!data.username) {\n      errors.username = \"Username is required\";\n    } else if (data.username.length < 3) {\n      errors.username = \"Username must be at least 3 characters long\";\n    }\n\n    if (!data.oldPassword) {\n      errors.oldPassword = \"Password is required\";\n    } else if (data.oldPassword.length < 8) {\n      errors.oldPassword = \"Password must be at least 8 characters long\";\n    }\n\n    setFormValidationErrors(errors);\n    return errors;\n  };\n\n  const handleEditUserDetails = async event => {\n    event.preventDefault();\n    setCredentialsError(\"\");\n    const validationErrors = validateDetailsForm(formData);\n\n    if (validationErrors.emailAddress === \"\" && validationErrors.username === \"\" && validationErrors.oldPassword === \"\") {\n      setIsLoading(true);\n      setButtonIsEnabled(false);\n\n      try {\n        await api.put(\"/users\", formData);\n        setIsLoading(false);\n        setNotification(prevState => ({\n          message: \"User details updated. Redirecting to login...\",\n          type: \"ok\"\n        }));\n        await new Promise(resolve => setTimeout(resolve, 6000));\n        setNotification(prevState => ({\n          message: \"\",\n          type: \"\"\n        }));\n        logout();\n      } catch (error) {\n        setIsLoading(false);\n        setButtonIsEnabled(true);\n\n        if (!error.response || error.response.status >= 500) {\n          setNotification(prevState => ({\n            message: \"Unable to contact the server. Please try again later.\",\n            type: \"error\"\n          }));\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          setNotification(prevState => ({\n            message: \"\",\n            type: \"\"\n          }));\n        } else if (error.response.status) {\n          if (error.response.data.includes(\"mail\")) setFormValidationErrors(prevState => ({ ...prevState,\n            emailAddress: error.response.data\n          }));\n          if (error.response.data.includes(\"password\")) setFormValidationErrors(prevState => ({ ...prevState,\n            oldPassword: error.response.data\n          }));\n        } else setCredentialsError(error.response.data);\n      }\n    }\n  };\n\n  const validatePasswordForm = data => {\n    const errors = {\n      oldPassword: \"\",\n      newPassword: \"\",\n      passwordVerification: \"\"\n    };\n    setFormValidationErrors(errors);\n\n    if (!data.oldPassword) {\n      errors.oldPassword = \"Password is required\";\n    } else if (data.oldPassword.length < 8) {\n      errors.oldPassword = \"Password must be at least 8 characters long\";\n    }\n\n    if (!data.newPassword) {\n      errors.newPassword = \"Password is required\";\n    } else if (data.newPassword.length < 8) {\n      errors.newPassword = \"Password must be at least 8 characters long\";\n    }\n\n    if (!data.passwordVerification) {\n      errors.passwordVerification = \"Plese re-enter the password\";\n    } else if (data.newPassword !== data.passwordVerification) {\n      errors.passwordVerification = \"Passwords don't match\";\n    }\n\n    setFormValidationErrors(errors);\n    return errors;\n  };\n\n  const handleEditUserPassword = async event => {\n    event.preventDefault();\n    setCredentialsError(\"\");\n    const validationErrors = validatePasswordForm(formData);\n\n    if (validationErrors.oldPassword === \"\" && validationErrors.newPassword === \"\" && validationErrors.passwordVerification === \"\") {\n      setIsLoading(true);\n      setButtonIsEnabled(false);\n\n      try {\n        await api.put(\"/users\", formData);\n        setIsLoading(false);\n        setNotification(prevState => ({\n          message: \"Password updated. Redirecting to login...\",\n          type: \"ok\"\n        }));\n        await new Promise(resolve => setTimeout(resolve, 6000));\n        setNotification(prevState => ({\n          message: \"\",\n          type: \"\"\n        }));\n        logout();\n      } catch (error) {\n        setIsLoading(false);\n        setButtonIsEnabled(true);\n\n        if (!error.response || error.response.status >= 500) {\n          setNotification(prevState => ({\n            message: \"Unable to contact the server. Please try again later.\",\n            type: \"error\"\n          }));\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          setNotification(prevState => ({\n            message: \"\",\n            type: \"\"\n          }));\n        } else if (error.response.status) {\n          if (error.response.data.includes(\"mail\")) setFormValidationErrors(prevState => ({ ...prevState,\n            emailAddress: error.response.data\n          }));\n          if (error.response.data.includes(\"password\")) setFormValidationErrors(prevState => ({ ...prevState,\n            oldPassword: error.response.data\n          }));\n        } else setCredentialsError(error.response.data);\n      }\n    }\n  };\n\n  const validateDeleteForm = data => {\n    const errors = {\n      emailAddress: \"\",\n      oldPassword: \"\"\n    };\n    setFormValidationErrors(errors);\n\n    if (!data.emailAddress) {\n      errors.emailAddress = \"Email address is required\";\n    } else if (data.emailAddress !== userAuth.emailAddress) {\n      errors.emailAddress = \"Please enter this account's email address\";\n    }\n\n    if (!data.oldPassword) {\n      errors.oldPassword = \"Password is required\";\n    } else if (data.oldPassword.length < 8) {\n      errors.oldPassword = \"Password must be at least 8 characters long\";\n    }\n\n    setFormValidationErrors(errors);\n    return errors;\n  };\n\n  const handleDeleteUser = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setButtonIsEnabled(false);\n\n    try {\n      await api.delete(\"/users\", {\n        data: deleteFormData\n      });\n      setIsLoading(false);\n      setNotification(prevState => ({\n        message: \"Your account and all personal data were deleted successfully.\",\n        type: \"ok\"\n      }));\n      await new Promise(resolve => setTimeout(resolve, 6000));\n      setNotification(prevState => ({\n        message: \"\",\n        type: \"\"\n      }));\n      logout();\n    } catch (error) {\n      setIsLoading(false);\n      setButtonIsEnabled(true);\n\n      if (!error.response || error.response.status >= 500) {\n        setNotification(prevState => ({\n          message: \"Unable to contact the server. Please try again later.\",\n          type: \"error\"\n        }));\n        await new Promise(resolve => setTimeout(resolve, 5000));\n        setNotification(prevState => ({\n          message: \"\",\n          type: \"\"\n        }));\n      } else if (error.response.status) {\n        if (error.response.data.includes(\"mail\")) setFormValidationErrors(prevState => ({ ...prevState,\n          emailAddress: error.response.data\n        }));\n        if (error.response.data.includes(\"password\")) setFormValidationErrors(prevState => ({ ...prevState,\n          oldPassword: error.response.data\n        }));\n      } else setCredentialsError(error.response.data);\n    }\n  };\n\n  const handleUsernameToggle = event => {\n    event.preventDefault();\n    setToggleUsername(prevState => !prevState);\n    setFormData(prevState => ({ ...prevState,\n      username: userAuth.username,\n      emailAddress: userAuth.emailAddress\n    }));\n    setTogglePassword(false);\n    setToggleDelete(false);\n  };\n\n  const handlePasswordToggle = event => {\n    event.preventDefault();\n    setTogglePassword(prevState => !prevState);\n    setToggleUsername(false);\n    setToggleDelete(false);\n  };\n\n  const handleDeleteToggle = event => {\n    event.preventDefault();\n    setToggleDelete(prevState => !prevState);\n    setFormData(prevState => ({ ...prevState,\n      emailAddress: \"\"\n    }));\n    setToggleUsername(false);\n    setTogglePassword(false);\n  };\n\n  const handleDeleteButton = event => {\n    setCredentialsError(\"\");\n    const validationErrors = validateDeleteForm(deleteFormData);\n\n    if (validationErrors.emailAddress === \"\" && validationErrors.oldPassword === \"\") {\n      setModalIsOpen(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.settingsContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.settingsBox,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Account Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.settingsGrid,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buttonsBox,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleUsernameToggle,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"User details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"./arrow-right.png\",\n                alt: \"arrow icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handlePasswordToggle,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"./arrow-right.png\",\n                alt: \"arrow icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDeleteToggle,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                id: \"delete-label\",\n                children: \"Delete Account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"./arrow-right.png\",\n                alt: \"arrow icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), toggleUsername && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.userBox,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Edit username and email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleEditUserDetails,\n              noValidate: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"New username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 33\n              }, this), formValidationErrors.username !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  autoComplete: \"new-password\",\n                  className: styles.validationError,\n                  type: \"text\",\n                  name: \"username\",\n                  value: formData.username,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                autoComplete: \"new-password\",\n                type: \"text\",\n                name: \"username\",\n                value: formData.username,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"New email address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 33\n              }, this), formValidationErrors.emailAddress !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  autoComplete: \"new-password\",\n                  className: styles.validationError,\n                  type: \"email\",\n                  name: \"emailAddress\",\n                  value: formData.emailAddress,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.emailAddress\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                autoComplete: \"new-password\",\n                type: \"email\",\n                name: \"emailAddress\",\n                value: formData.emailAddress,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Current password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 33\n              }, this), formValidationErrors.oldPassword !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  autoComplete: \"new-password\",\n                  className: styles.validationError,\n                  type: \"password\",\n                  name: \"oldPassword\",\n                  value: formData.oldPassword,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.oldPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                autoComplete: \"new-password\",\n                type: \"password\",\n                name: \"oldPassword\",\n                value: formData.oldPassword,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 33\n              }, this), credentialsError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.validationErrorMessage,\n                children: credentialsError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.submitButtonBox,\n                children: [buttonIsEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  children: \"Save changes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 41\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  children: \"Saving changes...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 41\n                }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.loadingSpinnerContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: resources.spinner\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 25\n          }, this), togglePassword && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.userBox,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Change password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleEditUserPassword,\n              autoComplete: \"off\",\n              noValidate: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Current password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 33\n              }, this), formValidationErrors.oldPassword !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: styles.validationError,\n                  type: \"password\",\n                  name: \"oldPassword\",\n                  value: formData.oldPassword,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.oldPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"oldPassword\",\n                value: formData.oldPassword,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"New password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 33\n              }, this), formValidationErrors.newPassword !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: styles.validationError,\n                  type: \"password\",\n                  name: \"newPassword\",\n                  value: formData.newPassword,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.newPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"newPassword\",\n                value: formData.newPassword,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Re-enter password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }, this), formValidationErrors.passwordVerification !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: styles.validationError,\n                  type: \"password\",\n                  name: \"passwordVerification\",\n                  value: formData.passwordVerification,\n                  onChange: handleFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.passwordVerification\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"passwordVerification\",\n                value: formData.passwordVerification,\n                onChange: handleFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 33\n              }, this), credentialsError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.validationErrorMessage,\n                children: credentialsError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.submitButtonBox,\n                children: [buttonIsEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  children: \"Save changes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 41\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  children: \"Saving changes...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 41\n                }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.loadingSpinnerContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: resources.spinner\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 469,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 25\n          }, this), toggleDelete && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.userBox,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"delete-title\",\n              children: \"Permanently Delete Your Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleDeleteUser,\n              autoComplete: \"off\",\n              noValidate: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Type yor email address to confirm:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 33\n              }, this), formValidationErrors.emailAddress !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: styles.validationError,\n                  type: \"email\",\n                  name: \"emailAddress\",\n                  value: deleteFormData.emailAddress,\n                  onChange: handleDeleteFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.emailAddress\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                name: \"emailAddress\",\n                value: deleteFormData.emailAddress,\n                onChange: handleDeleteFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Current password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 33\n              }, this), formValidationErrors.oldPassword !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: styles.validationError,\n                  autoComplete: \"new-password\",\n                  type: \"password\",\n                  name: \"oldPassword\",\n                  value: deleteFormData.oldPassword,\n                  onChange: handleDeleteFormChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: styles.validationErrorMessage,\n                  children: formValidationErrors.oldPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"oldPassword\",\n                value: deleteFormData.oldPassword,\n                onChange: handleDeleteFormChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 33\n              }, this), credentialsError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.validationErrorMessage,\n                children: credentialsError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.submitButtonBox,\n                children: [buttonIsEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  id: \"delete\",\n                  onClick: handleDeleteButton,\n                  children: \"Delete account\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 41\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  children: \"Deleting account...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 41\n                }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.loadingSpinnerContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: resources.spinner\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 33\n              }, this), modalIsOpen && /*#__PURE__*/_jsxDEV(DeleteModal, {\n                setModalIsOpen: setModalIsOpen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), notification.message !== \"\" && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Settings, \"CpxD7khbOzJGqVHGqXaTF85zqx4=\", false, function () {\n  return [useAxios];\n});\n\n_c = Settings;\nexport default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/Settings.js"],"names":["useState","useEffect","useContext","AuthContext","useAxios","NavBar","Notification","DeleteModal","styles","resources","Settings","userAuth","setUserAuth","logout","formData","setFormData","username","emailAddress","oldPassword","newPassword","passwordVerification","deleteFormData","setDeleteFormData","credentialsError","setCredentialsError","isLoading","setIsLoading","buttonIsEnabled","setButtonIsEnabled","formValidationErrors","setFormValidationErrors","toggleUsername","setToggleUsername","togglePassword","setTogglePassword","toggleDelete","setToggleDelete","notification","setNotification","message","type","modalIsOpen","setModalIsOpen","api","getCredentials","response","get","prevState","data","error","Promise","resolve","setTimeout","handleFormChange","event","name","value","target","handleDeleteFormChange","validateDetailsForm","errors","emailPattern","test","length","handleEditUserDetails","preventDefault","validationErrors","put","status","includes","validatePasswordForm","handleEditUserPassword","validateDeleteForm","handleDeleteUser","delete","handleUsernameToggle","handlePasswordToggle","handleDeleteToggle","handleDeleteButton","settingsContainer","settingsBox","settingsGrid","buttonsBox","userBox","validationError","validationErrorMessage","submitButtonBox","loadingSpinnerContainer","spinner"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport useAxios from \"../utils/useAxios\";\nimport NavBar from \"../components/Dashboard/Navbar/Navbar\";\nimport Notification from \"../components/Dashboard/Notification\";\nimport DeleteModal from \"../components/Settings/DeleteModal\";\nimport styles from \"../styles/Settings.module.scss\";\nimport resources from \"../styles/Resources.module.scss\";\n\nconst Settings = () => {\n\n    const { userAuth, setUserAuth, logout } = useContext(AuthContext);\n    const [formData, setFormData] = useState({username: userAuth.username, emailAddress: userAuth.emailAddress, oldPassword: \"\", newPassword: \"\", passwordVerification: \"\"});\n    const [deleteFormData, setDeleteFormData] = useState({emailAddress: \"\", oldPassword: \"\"});\n    const [credentialsError, setCredentialsError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [buttonIsEnabled, setButtonIsEnabled] = useState(true);\n    const [formValidationErrors, setFormValidationErrors] = useState({username: \"\", emailAddress: \"\", oldPassword: \"\", newPassword: \"\", passwordVerification: \"\"});\n    const [toggleUsername, setToggleUsername] = useState(false);\n    const [togglePassword, setTogglePassword] = useState(false);\n    const [toggleDelete, setToggleDelete] = useState(false);\n    const [notification, setNotification] = useState({message: \"\", type: \"\"});\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n\n\tconst api = useAxios();\n\n    useEffect( () => {\n\t\tgetCredentials();\n    }, []);\n\n\tconst getCredentials = async () => {\n\n        try {\n            const response = await api.get(\"/users/authenticated\");\n\t\t\t\n            setUserAuth( prevState => ({\n                ...prevState,\n                username: response.data.username,\n                emailAddress: response.data.emailAddress}\n            ));\n            \n        } catch (error) {\n            setNotification(prevState => ({message: \"Unable to verify identity. Loging out...\", type: \"error\"}));\n            await new Promise(resolve => setTimeout(resolve, 6000));\n            setNotification(prevState => ({message: \"\", type: \"\"}));\n            logout();\n        }\n    };\n\n    const handleFormChange = (event) => {\n        const {name, value} = event.target;\n        setFormData( prevState => ({\n            ...prevState,\n            [name]: value \n        }));\n    }\n\n    const handleDeleteFormChange = (event) => {\n        const {name, value} = event.target;\n        setDeleteFormData( prevState => ({\n            ...prevState,\n            [name]: value \n        }));\n    }\n\n    const validateDetailsForm = (data) => {\n        const errors = {username:\"\", emailAddress: \"\", oldPassword: \"\"};\n        setFormValidationErrors(errors);\n    \n        const emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    \n        if (!data.emailAddress) {\n            errors.emailAddress = \"Email address is required\";\n        } \n        else if (!(emailPattern.test(data.emailAddress))) {\n            errors.emailAddress = \"Please enter a valid email address\";\n        }\n\n        if (!data.username) {\n            errors.username = \"Username is required\";\n        } \n        else if (data.username.length < 3) {\n            errors.username = \"Username must be at least 3 characters long\";\n        }\n\n        if (!data.oldPassword) {\n            errors.oldPassword = \"Password is required\";\n        } else if (data.oldPassword.length < 8) {\n            errors.oldPassword = \"Password must be at least 8 characters long\";\n        }\n\n        setFormValidationErrors(errors);\n        return errors;\n    }\n\n    const handleEditUserDetails = async (event) => {\n        event.preventDefault();\n\n        setCredentialsError(\"\");\n\n        const validationErrors = validateDetailsForm(formData);\n        \n        if (validationErrors.emailAddress === \"\" && validationErrors.username === \"\" && validationErrors.oldPassword === \"\") {\n\n            setIsLoading(true);\n            setButtonIsEnabled(false);\n            \n            try {\n                await api.put(\"/users\", formData);\n                setIsLoading(false);\n                setNotification(prevState => ({message: \"User details updated. Redirecting to login...\", type: \"ok\"}));\n                await new Promise(resolve => setTimeout(resolve, 6000));\n                setNotification(prevState => ({message: \"\", type: \"\"}));\n                logout();\n\n            } catch (error) {\n                setIsLoading(false);\n                setButtonIsEnabled(true);\n\n                if (!error.response || error.response.status >= 500) {\n                    setNotification(prevState => ({message: \"Unable to contact the server. Please try again later.\", type: \"error\"}));\n                    await new Promise(resolve => setTimeout(resolve, 5000));\n                    setNotification(prevState => ({message: \"\", type: \"\"}));\n                } else if (error.response.status) {\n                    if (error.response.data.includes(\"mail\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        emailAddress: error.response.data \n                    }));\n                    if (error.response.data.includes(\"password\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        oldPassword: error.response.data\n                    }));\n                } else setCredentialsError(error.response.data);     \n            }\n        }\n    }\n\n    const validatePasswordForm = (data) => {\n        const errors = {oldPassword: \"\", newPassword: \"\", passwordVerification: \"\"};\n\n        setFormValidationErrors(errors);\n    \n        if (!data.oldPassword) {\n            errors.oldPassword = \"Password is required\";\n        } else if (data.oldPassword.length < 8) {\n            errors.oldPassword = \"Password must be at least 8 characters long\";\n        }\n\n        if (!data.newPassword) {\n            errors.newPassword = \"Password is required\";\n        } else if (data.newPassword.length < 8) {\n            errors.newPassword = \"Password must be at least 8 characters long\";\n        }\n\n        if (!data.passwordVerification) {\n            errors.passwordVerification = \"Plese re-enter the password\";\n        } else if (data.newPassword !== data.passwordVerification) {\n            errors.passwordVerification = \"Passwords don't match\";\n        }\n\n        setFormValidationErrors(errors);\n        return errors;\n    }\n\n    const handleEditUserPassword =  async (event) => {\n        event.preventDefault();\n\n        setCredentialsError(\"\");\n\n        const validationErrors = validatePasswordForm(formData);\n        \n        if (validationErrors.oldPassword === \"\" && validationErrors.newPassword === \"\" && validationErrors.passwordVerification === \"\" ) {\n\n            setIsLoading(true);\n            setButtonIsEnabled(false);\n            \n            try {\n                await api.put(\"/users\", formData);\n                setIsLoading(false);\n                setNotification(prevState => ({message: \"Password updated. Redirecting to login...\", type: \"ok\"}));\n                await new Promise(resolve => setTimeout(resolve, 6000));\n                setNotification(prevState => ({message: \"\", type: \"\"}));\n                logout();\n\n            } catch (error) {\n                setIsLoading(false);\n                setButtonIsEnabled(true);\n\n                if (!error.response || error.response.status >= 500) {\n                    setNotification(prevState => ({message: \"Unable to contact the server. Please try again later.\", type: \"error\"}));\n                    await new Promise(resolve => setTimeout(resolve, 5000));\n                    setNotification(prevState => ({message: \"\", type: \"\"}));\n                } else if (error.response.status) {\n                    if (error.response.data.includes(\"mail\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        emailAddress: error.response.data \n                    }));\n                    if (error.response.data.includes(\"password\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        oldPassword: error.response.data\n                    }));\n                } else setCredentialsError(error.response.data);     \n            }\n        }\n        \n    }\n\n    const validateDeleteForm = (data) => {\n        const errors = {emailAddress: \"\", oldPassword: \"\"};\n\n        setFormValidationErrors(errors);\n        \n        if (!data.emailAddress) {\n            errors.emailAddress = \"Email address is required\";\n        } \n        else if (data.emailAddress !== userAuth.emailAddress) {\n            errors.emailAddress = \"Please enter this account's email address\";\n        }\n\n        if (!data.oldPassword) {\n            errors.oldPassword = \"Password is required\";\n        } else if (data.oldPassword.length < 8) {\n            errors.oldPassword = \"Password must be at least 8 characters long\";\n        }\n\n        setFormValidationErrors(errors);\n        return errors;\n    }\n\n    const handleDeleteUser = async (event) => {\n        event.preventDefault();\n\n        setIsLoading(true);\n        setButtonIsEnabled(false);\n\n            try {\n                await api.delete(\"/users\", {data: deleteFormData});\n                setIsLoading(false);\n                setNotification(prevState => ({message: \"Your account and all personal data were deleted successfully.\", type: \"ok\"}));\n                await new Promise(resolve => setTimeout(resolve, 6000));\n                setNotification(prevState => ({message: \"\", type: \"\"}));\n                logout();\n            } catch (error) {\n                setIsLoading(false);\n                setButtonIsEnabled(true);\n                if (!error.response || error.response.status >= 500) {\n                    setNotification(prevState => ({message: \"Unable to contact the server. Please try again later.\", type: \"error\"}));\n                    await new Promise(resolve => setTimeout(resolve, 5000));\n                    setNotification(prevState => ({message: \"\", type: \"\"}));\n                } else if (error.response.status) {\n                    if (error.response.data.includes(\"mail\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        emailAddress: error.response.data \n                    }));\n                    if (error.response.data.includes(\"password\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        oldPassword: error.response.data\n                    }));\n                } else setCredentialsError(error.response.data);     \n            }\n    }\n\n    const handleUsernameToggle = (event) => {\n        event.preventDefault();\n        setToggleUsername(prevState => !prevState);\n        setFormData( prevState => ({\n            ...prevState,\n            username: userAuth.username,\n            emailAddress: userAuth.emailAddress}\n        ));\n        setTogglePassword(false);\n        setToggleDelete(false);\n    }\n\n    const handlePasswordToggle = (event) => {\n        event.preventDefault();\n        setTogglePassword(prevState => !prevState);\n        setToggleUsername(false);\n        setToggleDelete(false);\n    }\n\n    const handleDeleteToggle = (event) => {\n        event.preventDefault();\n        setToggleDelete(prevState => !prevState);\n        setFormData( prevState => ({\n            ...prevState,\n            emailAddress: \"\"}\n        ));\n        setToggleUsername(false);\n        setTogglePassword(false);\n    }\n\n    const handleDeleteButton = (event) => {\n        setCredentialsError(\"\");\n\n        const validationErrors = validateDeleteForm(deleteFormData);\n\n        if (validationErrors.emailAddress === \"\" && validationErrors.oldPassword === \"\") {\n            setModalIsOpen(true);\n        }\n    }\n\n\n    return (\n        <div>\n            <NavBar />\n            <main className={styles.settingsContainer}>\n                <div className={styles.settingsBox}>\n                    <h2>Account Settings</h2>\n                    <div className={styles.settingsGrid}>\n\n                        <div className={styles.buttonsBox}>\n                            <button onClick={handleUsernameToggle}>\n                                <label>User details</label>\n                                <img src={\"./arrow-right.png\"} alt=\"arrow icon\" />\n                            </button>\n                            <button onClick={handlePasswordToggle}>\n                                <label>Password</label>\n                                <img src={\"./arrow-right.png\"} alt=\"arrow icon\" />\n                            </button>\n                            <button onClick={handleDeleteToggle}>\n                                <label id=\"delete-label\">Delete Account</label>\n                                <img src={\"./arrow-right.png\"} alt=\"arrow icon\" />\n                            </button>\n                        </div>\n\n                        {toggleUsername &&\n                        <div className={styles.userBox}> \n                            <h3>Edit username and email address</h3>\n                            <form onSubmit={handleEditUserDetails} noValidate>\n                                \n                                <label>New username:</label>\n                                {formValidationErrors.username !== \"\" ?\n                                <div>\n                                <input autoComplete=\"new-password\" className={styles.validationError} type=\"text\" \n                                    name=\"username\"\n                                    value={formData.username}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.username}</p>\n                                </div> :\n                                <input autoComplete=\"new-password\" type=\"text\"\n                                    name=\"username\"\n                                    value={formData.username}\n                                    onChange={handleFormChange}\n                                    />\n                                }\n\n                                <label>New email address:</label>\n                                {formValidationErrors.emailAddress !== \"\" ?\n                                <div>\n                                    <input autoComplete=\"new-password\" className={styles.validationError} type=\"email\"\n                                    name=\"emailAddress\"\n                                    value={formData.emailAddress}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.emailAddress}</p>\n                                </div> :\n                                <input autoComplete=\"new-password\" type=\"email\" \n                                name=\"emailAddress\"\n                                value={formData.emailAddress}\n                                onChange={handleFormChange}\n                                />\n                                }\n                                \n                                <label>Current password:</label>\n                                {formValidationErrors.oldPassword !== \"\" ?\n                                <div> \n                                    <input autoComplete=\"new-password\" className={styles.validationError} type=\"password\" \n                                    name=\"oldPassword\"\n                                    value={formData.oldPassword}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.oldPassword}</p>\n                                </div> :\n                                <input autoComplete=\"new-password\" type=\"password\" \n                                name=\"oldPassword\"\n                                value={formData.oldPassword}\n                                onChange={handleFormChange}\n                                />\n                                }\n\n                                {credentialsError !== \"\" && <p className={styles.validationErrorMessage}>{credentialsError}</p>}\n                                <div className={styles.submitButtonBox}>\n                                    {buttonIsEnabled ? \n                                        <button>Save changes</button> :\n                                        <button disabled>Saving changes...</button>\n                                    }\n                                    {isLoading &&\n                                    <div className={styles.loadingSpinnerContainer}>\n                                        <div className={resources.spinner}></div>\n                                    </div>\n                                    }\n                                </div>\n                            </form>\n                        </div>}\n\n                        {togglePassword &&\n                        <div className={styles.userBox}>\n                            <h3>Change password</h3>\n                            <form onSubmit={handleEditUserPassword} autoComplete=\"off\" noValidate>\n\n                                <label>Current password:</label>\n                                {formValidationErrors.oldPassword !== \"\" ?\n                                <div> \n                                    <input className={styles.validationError} type=\"password\" \n                                    name=\"oldPassword\"\n                                    value={formData.oldPassword}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.oldPassword}</p>\n                                </div> :\n                                <input type=\"password\" \n                                name=\"oldPassword\"\n                                value={formData.oldPassword}\n                                onChange={handleFormChange}\n                                />\n                                }\n                                \n                                <label>New password:</label>\n                                {formValidationErrors.newPassword !== \"\" ?\n                                <div> \n                                    <input className={styles.validationError} type=\"password\" \n                                    name=\"newPassword\"\n                                    value={formData.newPassword}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.newPassword}</p>\n                                </div> :\n                                <input type=\"password\" \n                                name=\"newPassword\"\n                                value={formData.newPassword}\n                                onChange={handleFormChange}\n                                />\n                                }\n\n                                <label>Re-enter password:</label>\n                                {formValidationErrors.passwordVerification !== \"\" ?\n                                <div> \n                                    <input className={styles.validationError} type=\"password\" \n                                    name=\"passwordVerification\"\n                                    value={formData.passwordVerification}\n                                    onChange={handleFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.passwordVerification}</p>\n                                </div> :\n                                <input type=\"password\" \n                                name=\"passwordVerification\"\n                                value={formData.passwordVerification}\n                                onChange={handleFormChange}\n                                />\n                                }\n\n                                {credentialsError !== \"\" && <p className={styles.validationErrorMessage}>{credentialsError}</p>}\n                                <div className={styles.submitButtonBox}>\n                                    {buttonIsEnabled ? \n                                        <button>Save changes</button> :\n                                        <button disabled>Saving changes...</button>\n                                    }\n                                    {isLoading &&\n                                    <div className={styles.loadingSpinnerContainer}>\n                                        <div className={resources.spinner}></div>\n                                    </div>\n                                    }\n                                </div>\n                            </form>\n                        </div>}\n\n                        {toggleDelete &&\n                        <div className={styles.userBox}>\n                            <h3 id=\"delete-title\">Permanently Delete Your Account</h3>\n                            <form onSubmit={handleDeleteUser} autoComplete=\"off\" noValidate>\n                                <label>Type yor email address to confirm:</label>\n                                {formValidationErrors.emailAddress !== \"\" ?\n                                <div>\n                                    <input className={styles.validationError} type=\"email\"\n                                    name=\"emailAddress\"\n                                    value={deleteFormData.emailAddress}\n                                    onChange={handleDeleteFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.emailAddress}</p>\n                                </div> :\n                                <input type=\"email\" \n                                name=\"emailAddress\"\n                                value={deleteFormData.emailAddress}\n                                onChange={handleDeleteFormChange}\n                                />\n                                }\n                                \n                                <label>Current password:</label>\n                                {formValidationErrors.oldPassword !== \"\" ?\n                                <div> \n                                    <input className={styles.validationError} autoComplete=\"new-password\" type=\"password\" \n                                    name=\"oldPassword\"\n                                    value={deleteFormData.oldPassword}\n                                    onChange={handleDeleteFormChange}\n                                    />\n                                    <p className={styles.validationErrorMessage}>{formValidationErrors.oldPassword}</p>\n                                </div> :\n                                <input type=\"password\" \n                                name=\"oldPassword\"\n                                value={deleteFormData.oldPassword}\n                                onChange={handleDeleteFormChange}\n                                />\n                                }\n\n                                {credentialsError !== \"\" && <p className={styles.validationErrorMessage}>{credentialsError}</p>}\n                                <div className={styles.submitButtonBox}>\n                                    {buttonIsEnabled ? \n                                        <button type=\"button\" id=\"delete\" onClick={handleDeleteButton}>Delete account</button> :\n                                        <button disabled>Deleting account...</button>\n                                    }\n                                    \n                                    {isLoading &&\n                                    <div className={styles.loadingSpinnerContainer}>\n                                        <div className={resources.spinner}></div>\n                                    </div>\n                                    }\n                                </div>\n                                {modalIsOpen &&\n                                    <DeleteModal setModalIsOpen={setModalIsOpen} />\n                                }\n                            </form>\n                        </div>}\n                    </div>\n                </div>\n            </main>\n            {(notification.message !== \"\") &&\n            <Notification \n                message={notification.message} \n                type={notification.type}\n            />}\n        </div>\n\t)\n\n}\n\nexport default Settings;"]},"metadata":{},"sourceType":"module"}