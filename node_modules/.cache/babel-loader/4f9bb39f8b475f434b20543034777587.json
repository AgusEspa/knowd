{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useAxios = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth,\n    logOut\n  } = useContext(AuthContext);\n  const baseURL = \"http://localhost:8080/api\";\n  const refreshURL = `${baseURL}/users/token/refresh`;\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n\n  const refreshToken = async () => {\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${userAuth.refreshToken}`\n      }\n    };\n    const response = await axios.get(refreshURL, config); // log out if request unsuccessful due to expired token\n\n    window.localStorage.setItem(\"access_token\", response.data.access_token);\n    setUserAuth(prevState => ({\n      username: prevState.username,\n      accessToken: response.data.access_token,\n      refreshToken: prevState.refreshToken\n    }));\n    return response.data.access_token;\n  };\n\n  axiosInstance.interceptors.request.use(async request => {\n    // const decodedToken = jwt_decode(userAuth.accessToken);\n    // const tokenExpirationDate = decodedToken.exp;\n    // const currentTime = new Date().getTime() / 1000;\n    // const isValid = tokenExpirationDate > currentTime;\n    // if (isValid) return request;\n    // const refreshedToken = await refreshToken();\n    // request.headers.Authorization = `Bearer ${refreshedToken}`;\n    return request;\n  });\n  axiosInstance.interceptors.response.use(response => {\n    return response;\n  }, async error => {\n    if (error.response.status !== 403) return error;\n    const refreshedToken = await refreshToken();\n    const originalRequest = error.config;\n    originalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n    return axiosInstance(originalRequest);\n  });\n  return axiosInstance;\n};\n\n_s(useAxios, \"X45xrHcNiTYN3W9ev84RTlsrhY0=\");\n\nexport default useAxios;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useAxios.js"],"names":["axios","jwt_decode","useContext","AuthContext","useAxios","userAuth","setUserAuth","logOut","baseURL","refreshURL","axiosInstance","create","timeout","headers","accessToken","refreshToken","config","response","get","window","localStorage","setItem","data","access_token","prevState","username","interceptors","request","use","error","status","refreshedToken","originalRequest","Authorization"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAAoCL,UAAU,CAACC,WAAD,CAApD;AAEH,QAAMK,OAAO,GAAG,2BAAhB;AACA,QAAMC,UAAU,GAAI,GAAED,OAAQ,sBAA9B;AAEA,QAAME,aAAa,GAAGV,KAAK,CAACW,MAAN,CAAa;AAClCH,IAAAA,OAAO,EAAEA,OADyB;AAElCI,IAAAA,OAAO,EAAE,KAFyB;AAGlCC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASR,QAAQ,CAACS,WAAY;AAAlD;AAHyB,GAAb,CAAtB;;AAMA,QAAMC,YAAY,GAAG,YAAY;AAEhC,UAAMC,MAAM,GAAG;AACdH,MAAAA,OAAO,EAAE;AACR,yBAAkB,UAASR,QAAQ,CAACU,YAAa;AADzC;AADK,KAAf;AAMA,UAAME,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUT,UAAV,EAAsBO,MAAtB,CAAvB,CARgC,CAUhC;;AAEAG,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,QAAQ,CAACK,IAAT,CAAcC,YAA1D;AAEAjB,IAAAA,WAAW,CAACkB,SAAS,KAAM;AAC1BC,MAAAA,QAAQ,EAAED,SAAS,CAACC,QADM;AAE1BX,MAAAA,WAAW,EAAEG,QAAQ,CAACK,IAAT,CAAcC,YAFD;AAG1BR,MAAAA,YAAY,EAAES,SAAS,CAACT;AAHE,KAAN,CAAV,CAAX;AAMA,WAAOE,QAAQ,CAACK,IAAT,CAAcC,YAArB;AAEA,GAtBD;;AAwBAb,EAAAA,aAAa,CAACgB,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMD,OAAN,IAAiB;AAEvD;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA,WAAOA,OAAP;AAEA,GAfD;AAiBAjB,EAAAA,aAAa,CAACgB,YAAd,CAA2BT,QAA3B,CAAoCW,GAApC,CAAyCX,QAAQ,IAAI;AAEpD,WAAOA,QAAP;AAEC,GAJF,EAII,MAAMY,KAAN,IAAe;AAEjB,QAAIA,KAAK,CAACZ,QAAN,CAAea,MAAf,KAA0B,GAA9B,EAAmC,OAAOD,KAAP;AAEnC,UAAME,cAAc,GAAG,MAAMhB,YAAY,EAAzC;AAEA,UAAMiB,eAAe,GAAGH,KAAK,CAACb,MAA9B;AAEAgB,IAAAA,eAAe,CAACnB,OAAhB,CAAwBoB,aAAxB,GAAyC,UAASF,cAAe,EAAjE;AAEA,WAAOrB,aAAa,CAACsB,eAAD,CAApB;AAGD,GAjBD;AAmBG,SAAOtB,aAAP;AACH,CA1ED;;GAAMN,Q;;AA4EN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useAxios = () => {\n\n    const { userAuth, setUserAuth, logOut } = useContext(AuthContext);\n\n\tconst baseURL = \"http://localhost:8080/api\";\n\tconst refreshURL = `${baseURL}/users/token/refresh`; \n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\tconst refreshToken = async () => {\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t}\n\t\t}\n\n\t\tconst response = await axios.get(refreshURL, config);\n\n\t\t// log out if request unsuccessful due to expired token\n\t\t\t\t\n\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t\tsetUserAuth(prevState => ( {\n\t\t\tusername: prevState.username,\n\t\t\taccessToken: response.data.access_token,\n\t\t\trefreshToken: prevState.refreshToken\n\t\t}));\n\n\t\treturn response.data.access_token;\n\n\t}\n\n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\t// const decodedToken = jwt_decode(userAuth.accessToken);\n\t\t// const tokenExpirationDate = decodedToken.exp;\n\t\t// const currentTime = new Date().getTime() / 1000;\n\t\n\t\t// const isValid = tokenExpirationDate > currentTime;\n\t\n\t\t// if (isValid) return request;\n\n\t\t// const refreshedToken = await refreshToken();\n\t\t\n\t\t// request.headers.Authorization = `Bearer ${refreshedToken}`;\n\t\treturn request;\n\n\t});\n\n\taxiosInstance.interceptors.response.use( response => {\n\t\t\n\t\treturn response;\n\t\t\n\t\t}, async error => {\n\n\t\t\tif (error.response.status !== 403) return error;\n\t\n\t\t\tconst refreshedToken = await refreshToken();\n\n\t\t\tconst originalRequest = error.config;\n\n\t\t\toriginalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\n\t\t\treturn axiosInstance(originalRequest);\n\t  \n\t\t\t\n\t});\n    \n    return axiosInstance;\n}\n\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}