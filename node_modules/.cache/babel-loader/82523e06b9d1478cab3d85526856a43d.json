{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport useLogout from \"./utils/useLogout\";\n\nconst useAxios = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    userAuth,\n    setUserAuth,\n    logout\n  } = useContext(AuthContext);\n  const baseURL = \"http://localhost:8080/api\";\n  const refreshURL = `${baseURL}/users/token/refresh`;\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n\n  const useRfreshToken = async () => {\n    _s();\n\n    try {\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${userAuth.refreshToken}`\n        }\n      };\n      const response = await axios.get(refreshURL, config);\n      window.localStorage.setItem(\"access_token\", response.data.access_token);\n      setUserAuth(prevState => ({\n        username: prevState.username,\n        accessToken: response.data.access_token,\n        refreshToken: prevState.refreshToken\n      }));\n      return response.data.access_token;\n    } catch (e) {\n      console.log(\"Hi error\");\n      useLogout();\n    }\n  };\n\n  _s(useRfreshToken, \"SfrVfF+xBdrBs+zIcmcE4pFl0NM=\", false, function () {\n    return [useLogout];\n  });\n\n  axiosInstance.interceptors.request.use(async request => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return request;\n    const refreshedToken = await refreshToken();\n    request.headers.Authorization = `Bearer ${refreshedToken}`;\n    return request;\n  });\n  axiosInstance.interceptors.response.use(response => {\n    return response;\n  }, async error => {\n    if (error.response.status !== 403) return error;\n    const refreshedToken = await refreshToken();\n    const originalRequest = error.config;\n    originalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n    return axiosInstance(originalRequest);\n  });\n  return axiosInstance;\n};\n\n_s2(useAxios, \"/z3PSR2TKasLx8RMyAkE/tSL3qw=\");\n\nexport default useAxios;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useAxios.js"],"names":["axios","jwt_decode","useContext","AuthContext","useLogout","useAxios","userAuth","setUserAuth","logout","baseURL","refreshURL","axiosInstance","create","timeout","headers","accessToken","useRfreshToken","config","refreshToken","response","get","window","localStorage","setItem","data","access_token","prevState","username","e","console","log","interceptors","request","use","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","refreshedToken","Authorization","error","status","originalRequest"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport useLogout from \"./utils/useLogout\";\n\nconst useAxios = () => {\n\n\tconst { userAuth, setUserAuth, logout } = useContext(AuthContext);\n    \n\tconst baseURL = \"http://localhost:8080/api\";\n\tconst refreshURL = `${baseURL}/users/token/refresh`; \n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\tconst useRfreshToken = async () => {\n\t\ttry {\n\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst response = await axios.get(refreshURL, config);\n\t\t\n\t\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t\t\tsetUserAuth(prevState => ( {\n\t\t\t\tusername: prevState.username,\n\t\t\t\taccessToken: response.data.access_token,\n\t\t\t\trefreshToken: prevState.refreshToken\n\t\t\t}));\n\n\t\t\treturn response.data.access_token;\n\t\t\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Hi error\");\n\t\t\tuseLogout();\n\t\t}\n\n\t}\n\n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif (isValid) return request;\n\n\t\tconst refreshedToken = await refreshToken();\n\t\t\n\t\trequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\t\treturn request;\n\n\t});\n\n\taxiosInstance.interceptors.response.use( response => {\n\n\t\treturn response;\n\t\t\n\t\t}, async error => {\n\n\t\t\tif (error.response.status !== 403) return error;\n\t\n\t\t\tconst refreshedToken = await refreshToken();\n\n\t\t\tconst originalRequest = error.config;\n\n\t\t\toriginalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\n\t\t\treturn axiosInstance(originalRequest);\n\t\n\t});\n    \n    return axiosInstance;\n}\n\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}