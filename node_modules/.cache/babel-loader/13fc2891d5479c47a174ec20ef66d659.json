{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useAxios = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth,\n    logout\n  } = useContext(AuthContext);\n  const baseURL = \"http://localhost:8080/api\";\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async request => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return request;\n    const refreshedToken = await refreshToken();\n    request.headers.Authorization = `Bearer ${refreshedToken}`;\n    return request;\n  });\n  axiosInstance.interceptors.response.use(response => {\n    return response;\n  }, async error => {\n    if (error.status !== 403) return error;\n    const refreshedToken = await refreshToken(); //refactor, cancel before\n\n    if (refreshToken === undefined) return error;\n    const originalRequest = error.config;\n    originalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n    return axiosInstance(originalRequest);\n  });\n  return axiosInstance;\n};\n\n_s(useAxios, \"/z3PSR2TKasLx8RMyAkE/tSL3qw=\");\n\nexport default useAxios;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useAxios.js"],"names":["axios","jwt_decode","useContext","AuthContext","useAxios","userAuth","setUserAuth","logout","baseURL","axiosInstance","create","timeout","headers","accessToken","interceptors","request","use","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","refreshedToken","refreshToken","Authorization","response","error","status","undefined","originalRequest","config"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAAoCL,UAAU,CAACC,WAAD,CAApD;AAEH,QAAMK,OAAO,GAAG,2BAAhB;AAEA,QAAMC,aAAa,GAAGT,KAAK,CAACU,MAAN,CAAa;AAClCF,IAAAA,OAAO,EAAEA,OADyB;AAElCG,IAAAA,OAAO,EAAE,KAFyB;AAGlCC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASP,QAAQ,CAACQ,WAAY;AAAlD;AAHyB,GAAb,CAAtB;AAQAJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMD,OAAN,IAAiB;AAEvD,UAAME,YAAY,GAAGhB,UAAU,CAACI,QAAQ,CAACQ,WAAV,CAA/B;AACA,UAAMK,mBAAmB,GAAGD,YAAY,CAACE,GAAzC;AACA,UAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C;AAEA,UAAMC,OAAO,GAAGL,mBAAmB,GAAGE,WAAtC;AAEA,QAAIG,OAAJ,EAAa,OAAOR,OAAP;AAEb,UAAMS,cAAc,GAAG,MAAMC,YAAY,EAAzC;AAEAV,IAAAA,OAAO,CAACH,OAAR,CAAgBc,aAAhB,GAAiC,UAASF,cAAe,EAAzD;AACA,WAAOT,OAAP;AAEA,GAfD;AAiBAN,EAAAA,aAAa,CAACK,YAAd,CAA2Ba,QAA3B,CAAoCX,GAApC,CAAyCW,QAAQ,IAAI;AAEpD,WAAOA,QAAP;AAEC,GAJF,EAII,MAAMC,KAAN,IAAe;AAEjB,QAAIA,KAAK,CAACC,MAAN,KAAiB,GAArB,EAA0B,OAAOD,KAAP;AAE1B,UAAMJ,cAAc,GAAG,MAAMC,YAAY,EAAzC,CAJiB,CAMjB;;AACA,QAAIA,YAAY,KAAKK,SAArB,EAAgC,OAAOF,KAAP;AAEhC,UAAMG,eAAe,GAAGH,KAAK,CAACI,MAA9B;AAEAD,IAAAA,eAAe,CAACnB,OAAhB,CAAwBc,aAAxB,GAAyC,UAASF,cAAe,EAAjE;AAEA,WAAOf,aAAa,CAACsB,eAAD,CAApB;AAED,GAnBD;AAqBG,SAAOtB,aAAP;AACH,CArDD;;GAAML,Q;;AAuDN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useAxios = () => {\n\n    const { userAuth, setUserAuth, logout } = useContext(AuthContext);\n\n\tconst baseURL = \"http://localhost:8080/api\";\n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\t\n\n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif (isValid) return request;\n\n\t\tconst refreshedToken = await refreshToken();\n\t\t\n\t\trequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\t\treturn request;\n\n\t});\n\n\taxiosInstance.interceptors.response.use( response => {\n\n\t\treturn response;\n\t\t\n\t\t}, async error => {\n\n\t\t\tif (error.status !== 403) return error;\n\t\n\t\t\tconst refreshedToken = await refreshToken();\n\n\t\t\t//refactor, cancel before\n\t\t\tif (refreshToken === undefined) return error;\n\n\t\t\tconst originalRequest = error.config;\n\n\t\t\toriginalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\n\t\t\treturn axiosInstance(originalRequest);\n\t\n\t});\n    \n    return axiosInstance;\n}\n\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}