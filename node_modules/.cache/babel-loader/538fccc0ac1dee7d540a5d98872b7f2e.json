{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\nconst baseURL = 'http://localhost:8080';\n\nconst useAxios = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth\n  } = useContext(AuthContext);\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${userAuth.accessToken}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async req => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return req;\n\n    try {\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${userAuth.refreshToken}`\n        }\n      };\n      const response = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n      window.localStorage.setItem(\"access_token\", response.data.access_token);\n      setUserAuth(prevState => ({\n        username: prevState.username,\n        accessToken: response.data.access_token,\n        refreshToken: prevState.refreshToken\n      }));\n      req.headers.Authorization = `Bearer ${response.data.access_token}`;\n      return req;\n    } catch (e) {\n      console.log(`Error: ${e}`);\n    }\n  });\n  return axiosInstance;\n};\n\n_s(useAxios, \"dRy7P6vBdAhkDNVwznNO7obL4K8=\");\n\nexport default useAxios;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useAxios.js"],"names":["axios","jwt_decode","useContext","AuthContext","baseURL","useAxios","userAuth","setUserAuth","axiosInstance","create","headers","Authorization","accessToken","interceptors","request","use","req","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","config","refreshToken","response","get","window","localStorage","setItem","data","access_token","prevState","username","e","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BL,UAAU,CAACC,WAAD,CAA5C;AAEH,QAAMK,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa;AAClCL,IAAAA,OADkC;AAElCM,IAAAA,OAAO,EAAC;AAACC,MAAAA,aAAa,EAAG,UAASL,QAAQ,CAACM,WAAY;AAA/C;AAF0B,GAAb,CAAtB;AAKAJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMC,GAAN,IAAa;AAEnD,UAAMC,YAAY,GAAGhB,UAAU,CAACK,QAAQ,CAACM,WAAV,CAA/B;AACA,UAAMM,mBAAmB,GAAGD,YAAY,CAACE,GAAzC;AACA,UAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C;AAEA,UAAMC,OAAO,GAAGL,mBAAmB,GAAGE,WAAtC;AAEA,QAAGG,OAAH,EAAY,OAAOP,GAAP;;AAEZ,QAAI;AACH,YAAMQ,MAAM,GAAG;AACdd,QAAAA,OAAO,EAAE;AACR,2BAAkB,UAASJ,QAAQ,CAACmB,YAAa;AADzC;AADK,OAAf;AAKA,YAAMC,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAEvB,OAAQ,0BAArB,EAAgDoB,MAAhD,CAAvB;AAEAI,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,QAAQ,CAACK,IAAT,CAAcC,YAA1D;AAEAzB,MAAAA,WAAW,CAAC0B,SAAS,KAAM;AAC1BC,QAAAA,QAAQ,EAAED,SAAS,CAACC,QADM;AAE1BtB,QAAAA,WAAW,EAAEc,QAAQ,CAACK,IAAT,CAAcC,YAFD;AAG1BP,QAAAA,YAAY,EAAEQ,SAAS,CAACR;AAHE,OAAN,CAAV,CAAX;AAMAT,MAAAA,GAAG,CAACN,OAAJ,CAAYC,aAAZ,GAA6B,UAASe,QAAQ,CAACK,IAAT,CAAcC,YAAa,EAAjE;AACA,aAAOhB,GAAP;AAEA,KAnBD,CAmBE,OAAOmB,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,CAAE,EAAxB;AACA;AACD,GAhCD;AAkCG,SAAO3B,aAAP;AACH,CA5CD;;GAAMH,Q;;AA8CN,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\n\nconst baseURL = 'http://localhost:8080';\n\nconst useAxios = () => {\n\n    const { userAuth, setUserAuth } = useContext(AuthContext);\n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL,\n\t\theaders:{Authorization: `Bearer ${userAuth.accessToken}`}\n\t});\n\n\taxiosInstance.interceptors.request.use(async req => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif(isValid) return req;\n\t\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst response = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n\t\t\t\n\t\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token)\n\n\t\t\tsetUserAuth(prevState => ( {\n\t\t\t\tusername: prevState.username,\n\t\t\t\taccessToken: response.data.access_token,\n\t\t\t\trefreshToken: prevState.refreshToken\n\t\t\t}));\n\t\n\t\t\treq.headers.Authorization = `Bearer ${response.data.access_token}`\n\t\t\treturn req\n\t\t\t\n\t\t} catch (e) {\n\t\t\tconsole.log(`Error: ${e}`);\n\t\t}\n\t})\n    \n    return axiosInstance;\n}\n\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}