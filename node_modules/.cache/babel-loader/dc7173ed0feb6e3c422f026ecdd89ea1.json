{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth,\n    logOut\n  } = useContext(AuthContext);\n  const baseURL = \"http://localhost:8080/api\";\n  const refreshURL = `${baseURL}/users/token/refresh`;\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  });\n\n  const refreshToken = async () => {\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${userAuth.refreshToken}`\n      }\n    };\n    const response = await axios.get(refreshURL, config); // log out if request unsuccessful due to expired token\n\n    window.localStorage.setItem(\"access_token\", response.data.access_token); //here\n\n    return response.data.access_token;\n  };\n\n  axiosInstance.interceptors.request.use(async request => {\n    const decodedToken = jwt_decode(userAuth.accessToken);\n    const tokenExpirationDate = decodedToken.exp;\n    const currentTime = new Date().getTime() / 1000;\n    const isValid = tokenExpirationDate > currentTime;\n    if (isValid) return request;\n    const refreshedToken = await refreshToken();\n    setUserAuth(prevState => ({\n      username: prevState.username,\n      accessToken: refreshedToken,\n      refreshToken: prevState.refreshToken\n    }));\n    request.headers.Authorization = `Bearer ${userAuth.accessToken}`;\n    return request;\n  });\n  axios.interceptors.response.use(response => {\n    console.log(\"Hi\");\n    return response;\n  }, async error => {\n    console.log(\"Hi\");\n    if (error.response.status !== 403) return error;\n    const refreshedToken = await refreshToken();\n    const originalRequest = error.config;\n    originalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n    return new Promise((resolve, reject) => {\n      axios.request(originalRequest).then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  });\n  return axiosInstance;\n};\n\n_s(useRefreshToken, \"X45xrHcNiTYN3W9ev84RTlsrhY0=\");\n\nexport default useRefreshToken;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useRefreshToken.js"],"names":["axios","jwt_decode","useContext","AuthContext","useRefreshToken","userAuth","setUserAuth","logOut","baseURL","refreshURL","axiosInstance","create","timeout","headers","accessToken","refreshToken","config","response","get","window","localStorage","setItem","data","access_token","interceptors","request","use","decodedToken","tokenExpirationDate","exp","currentTime","Date","getTime","isValid","refreshedToken","prevState","username","Authorization","console","log","error","status","originalRequest","Promise","resolve","reject","then","catch"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n\n    const { userAuth, setUserAuth, logOut } = useContext(AuthContext);\n\n\tconst baseURL = \"http://localhost:8080/api\";\n\tconst refreshURL = `${baseURL}/users/token/refresh`; \n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\tconst refreshToken = async () => {\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t}\n\t\t}\n\n\t\tconst response = await axios.get(refreshURL, config);\n\n\t\t// log out if request unsuccessful due to expired token\n\t\t\t\t\n\t\twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t\t//here\n\n\t\treturn response.data.access_token;\n\n\t}\n\n\taxiosInstance.interceptors.request.use(async request => {\n\n\t\tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t\tconst tokenExpirationDate = decodedToken.exp;\n\t\tconst currentTime = new Date().getTime() / 1000;\n\t\n\t\tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t\tif (isValid) return request;\n\n\t\tconst refreshedToken = await refreshToken();\n\n\t\tsetUserAuth(prevState => ( {\n\t\t\tusername: prevState.username,\n\t\t\taccessToken: refreshedToken,\n\t\t\trefreshToken: prevState.refreshToken\n\t\t}));\n\t\t\n\t\trequest.headers.Authorization = `Bearer ${userAuth.accessToken}`;\n\t\treturn request;\n\n\t});\n\n\n\taxios.interceptors.response.use( response => {\n\t\tconsole.log(\"Hi\");\n\t\treturn response;\n\t\t\n\t\t}, async error => {\n\n\t\t\tconsole.log(\"Hi\");\n\t\t\tif (error.response.status !== 403) return error;\n\t\n\t\t\tconst refreshedToken = await refreshToken();\n\n\t\t\tconst originalRequest = error.config;\n\n\t\t\toriginalRequest.headers.Authorization = `Bearer ${refreshedToken}`;\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\taxios.request(originalRequest).then(response => {\n\t\t\t\t  resolve(response);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t  reject(error);\n\t\t\t\t})\n\t\t\t});\n\t  \n\t\t\t\n\t});\n    \n    return axiosInstance;\n}\n\nexport default useRefreshToken;"]},"metadata":{},"sourceType":"module"}