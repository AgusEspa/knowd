{"ast":null,"code":"var _jsxFileName = \"/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/ForgotPassword.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../styles/Login.module.scss\";\nimport resources from \"../styles/Resources.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForgotPassword = () => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    emailAddress: \"\"\n  });\n  const [formValidationErrors, setFormValidationErrors] = useState({\n    emailAddress: \"\"\n  });\n  const [networkError, setNetworkError] = useState(\"\");\n  const [buttonIsEnabled, setButtonIsEnabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSent, setIsSent] = useState(\"\");\n  const baseUrl = \"http://localhost:8080/api\";\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const validateForm = data => {\n    const errors = {\n      emailAddress: \"\"\n    };\n    setFormValidationErrors(errors);\n    const emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (!data.emailAddress) {\n      errors.emailAddress = \"Email address is required\";\n    } else if (!emailPattern.test(data.emailAddress)) {\n      errors.emailAddress = \"Please enter a valid email address\";\n    }\n\n    setFormValidationErrors(errors);\n    return errors;\n  };\n\n  const handleResetPasswordRequest = async event => {\n    event.preventDefault();\n    setIsSent(false);\n    setNetworkError(\"\");\n    const validationErrors = validateForm(formData);\n\n    if (validationErrors.emailAddress === \"\") {\n      setNetworkError(\"\");\n      setIsLoading(true);\n      setButtonIsEnabled(false);\n\n      try {\n        await axios.post(`${baseUrl}/users/forgot_password`, formData);\n        setIsLoading(false);\n        setIsSent(true);\n      } catch (error) {\n        setIsLoading(false);\n        setButtonIsEnabled(true);\n\n        if (!error.response || error.response.status >= 500) {\n          setNetworkError(\"Unable to contact the server. Please try again later.\");\n        } else if (error.response.status) {\n          if (error.response.data.includes(\"email\")) setFormValidationErrors(prevState => ({ ...prevState,\n            emailAddress: error.response.data\n          }));\n        } else setNetworkError(error.response.data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: styles.loginContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loginBox,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.logoBox,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: styles.logo,\n          src: \"./logo.png\",\n          alt: \"self.OKRs logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleResetPasswordRequest,\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), formValidationErrors.emailAddress !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"validation-error\",\n            type: \"email\",\n            name: \"emailAddress\",\n            value: formData.emailAddress,\n            onChange: handleFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"validation-error-message\",\n            children: formValidationErrors.emailAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"emailAddress\",\n          value: formData.emailAddress,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), buttonIsEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: true,\n          children: \"Submiting...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), networkError !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"registration-error-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: networkError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), isSent && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"successful-registration\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your request was sent.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please check your INBOX or SPAM.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ForgotPassword, \"W4wMJJwFxK3eSREFdShposbjw1M=\");\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/pages/ForgotPassword.js"],"names":["useState","axios","styles","resources","ForgotPassword","formData","setFormData","emailAddress","formValidationErrors","setFormValidationErrors","networkError","setNetworkError","buttonIsEnabled","setButtonIsEnabled","isLoading","setIsLoading","isSent","setIsSent","baseUrl","handleFormChange","event","name","value","target","prevState","validateForm","data","errors","emailPattern","test","handleResetPasswordRequest","preventDefault","validationErrors","post","error","response","status","includes","loginContainer","loginBox","logoBox","logo"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../styles/Login.module.scss\";\nimport resources from \"../styles/Resources.module.scss\";\n\nconst ForgotPassword = () => {\n\n    const [formData, setFormData] = useState({emailAddress: \"\"});\n    const [formValidationErrors, setFormValidationErrors] = useState({emailAddress: \"\"});\n    const [networkError, setNetworkError] = useState(\"\");\n    const [buttonIsEnabled, setButtonIsEnabled] = useState(true);\n    const [isLoading, setIsLoading] = useState(false);\n\tconst [isSent, setIsSent] = useState(\"\");\n\n\tconst baseUrl = \"http://localhost:8080/api\";\n\n\tconst handleFormChange = (event) => {\n        const {name, value} = event.target;\n        setFormData( prevState => ({\n            ...prevState,\n            [name]: value \n        }));\n    }\n\n    const validateForm = (data) => {\n        const errors = {emailAddress: \"\"};\n        \n        setFormValidationErrors(errors);\n    \n        const emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    \n        if (!data.emailAddress) {\n            errors.emailAddress = \"Email address is required\";\n        } \n        else if (!(emailPattern.test(data.emailAddress))) {\n            errors.emailAddress = \"Please enter a valid email address\";\n        }\n\n        setFormValidationErrors(errors);\n        return errors;\n    }\n\n  \tconst handleResetPasswordRequest = async (event) => {\n\t\tevent.preventDefault();\n\n        setIsSent(false);\n        setNetworkError(\"\");\n\n        const validationErrors = validateForm(formData);\n\n        if (validationErrors.emailAddress === \"\") {\n\n            setNetworkError(\"\");\n            setIsLoading(true);\n            setButtonIsEnabled(false);\n\n            try {\n                await axios.post(`${baseUrl}/users/forgot_password`, formData);\n                setIsLoading(false);\n                setIsSent(true);\n            } catch (error) {\n                setIsLoading(false);\n                setButtonIsEnabled(true);\n                if (!error.response || error.response.status >= 500) {\n                    setNetworkError(\"Unable to contact the server. Please try again later.\");\n                } else if (error.response.status) {\n                    if (error.response.data.includes(\"email\"))\n                    setFormValidationErrors( prevState => ({\n                        ...prevState,\n                        emailAddress: error.response.data \n                    }));\n                } else setNetworkError(error.response.data);     \n            } \n        }\n  \t}\n\n\n\treturn (\n\t\t<main className={styles.loginContainer}>\n            <div className={styles.loginBox}>\n                <div className={styles.logoBox}>\n\t\t\t\t\t<img className={styles.logo} src={\"./logo.png\"} alt=\"self.OKRs logo\"/>\n\t\t\t\t</div>  \n\n                <form onSubmit={handleResetPasswordRequest} noValidate>\n\n                    <label>Email address:</label>\n                    {formValidationErrors.emailAddress !== \"\" ?\n                    <div>\n                        <input id=\"validation-error\" type=\"email\"\n                        name=\"emailAddress\"\n                        value={formData.emailAddress}\n                        onChange={handleFormChange}\n                        />\n                        <p id=\"validation-error-message\">{formValidationErrors.emailAddress}</p>\n                    </div> :\n                    <input type=\"email\" \n                    name=\"emailAddress\"\n                    value={formData.emailAddress}\n                    onChange={handleFormChange}\n                    />\n                    }\n                    \n                    {buttonIsEnabled ? \n                        <button>Submit</button> :\n                        <button disabled>Submiting...</button>\n                    }\n\n                    {isLoading &&\n                    <div className=\"loading-spinner-container\">\n                        <div className=\"loading-spinner\"></div>\n                    </div>\n                    }\n                    {networkError !== \"\" && \n                    <div className=\"registration-error-message\">\n                        <p>{networkError}</p>\n                    </div>}\n                    {isSent && \n                    <div className=\"successful-registration\">\n                    <p>Your request was sent.</p>\n                    <p>Please check your INBOX or SPAM.</p>\n                    </div>}\n\n                </form>\n\n                \n            </div>\n        </main>\n\t)\n}\n\nexport default ForgotPassword;"]},"metadata":{},"sourceType":"module"}