{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n  _s();\n\n  const {\n    userAuth,\n    setUserAuth\n  } = useContext(AuthContext);\n  const baseURL = \"http://localhost:8080/api\";\n  const refreshURL = `${baseURL}/users/token/refresh`;\n  const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000,\n    headers: {\n      'Authorization': `Bearer ${userAuth.accessToken}`\n    }\n  }); // axiosInstance.interceptors.request.use(async request => {\n  // \tconst decodedToken = jwt_decode(userAuth.accessToken);\n  // \tconst tokenExpirationDate = decodedToken.exp;\n  // \tconst currentTime = new Date().getTime() / 1000;\n  // \tconst isValid = tokenExpirationDate > currentTime;\n  // \tif (isValid) return request;\n  // \tconst config = {\n  // \t\theaders: {\n  // \t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n  // \t\t}\n  // \t}\n  // \tconst response = await axios.get(refreshURL, config);\n  // \twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n  // \tsetUserAuth(prevState => ( {\n  // \t\tusername: prevState.username,\n  // \t\taccessToken: response.data.access_token,\n  // \t\trefreshToken: prevState.refreshToken\n  // \t}));\n  // \trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n  // \treturn request;\n  // }, error => {\n  // \treturn Promise.reject(error);\n  // });\n\n  axios.interceptors.response.use(response => response, async error => {\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${userAuth.refreshToken}`\n      }\n    };\n    const newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n    window.localStorage.setItem(\"access_token\", newResponse.data.access_token);\n    setUserAuth(prevState => ({\n      username: prevState.username,\n      accessToken: newResponse.data.access_token,\n      refreshToken: prevState.refreshToken\n    }));\n    request.headers.Authorization = `Bearer ${response.data.access_token}`;\n    return request;\n  });\n  axios.interceptors.response.use(response => response, error => {\n    const status = error.response ? error.response.status : null;\n\n    if (status === 401) {\n      return refreshToken(store, _ => {\n        error.config.headers['Authorization'] = 'Bearer ' + store.state.auth.token;\n        error.config.baseURL = undefined;\n        return Axios.request(error.config);\n      });\n    }\n\n    return Promise.reject(error);\n  });\n  return axiosInstance;\n};\n\n_s(useRefreshToken, \"dRy7P6vBdAhkDNVwznNO7obL4K8=\");\n\nexport default useRefreshToken;","map":{"version":3,"sources":["/Users/agusespa/Programming/Projects/self-okrs-ui/src/utils/useRefreshToken.js"],"names":["axios","jwt_decode","useContext","AuthContext","useRefreshToken","userAuth","setUserAuth","baseURL","refreshURL","axiosInstance","create","timeout","headers","accessToken","interceptors","response","use","error","config","refreshToken","newResponse","get","window","localStorage","setItem","data","access_token","prevState","username","request","Authorization","status","store","_","state","auth","token","undefined","Axios","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,UAAU,CAACC,WAAD,CAA5C;AAEH,QAAMI,OAAO,GAAG,2BAAhB;AACA,QAAMC,UAAU,GAAI,GAAED,OAAQ,sBAA9B;AAEA,QAAME,aAAa,GAAGT,KAAK,CAACU,MAAN,CAAa;AAClCH,IAAAA,OAAO,EAAEA,OADyB;AAElCI,IAAAA,OAAO,EAAE,KAFyB;AAGlCC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASP,QAAQ,CAACQ,WAAY;AAAlD;AAHyB,GAAb,CAAtB,CAP6B,CAa7B;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEAb,EAAAA,KAAK,CAACc,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAiCD,QAAQ,IAAIA,QAA7C,EAAuD,MAAME,KAAN,IAAe;AAErE,UAAMC,MAAM,GAAG;AACdN,MAAAA,OAAO,EAAE;AACR,yBAAkB,UAASP,QAAQ,CAACc,YAAa;AADzC;AADK,KAAf;AAMA,UAAMC,WAAW,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEd,OAAQ,0BAArB,EAAgDW,MAAhD,CAA1B;AAEAI,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,WAAW,CAACK,IAAZ,CAAiBC,YAA7D;AAEApB,IAAAA,WAAW,CAACqB,SAAS,KAAM;AAC1BC,MAAAA,QAAQ,EAAED,SAAS,CAACC,QADM;AAE1Bf,MAAAA,WAAW,EAAEO,WAAW,CAACK,IAAZ,CAAiBC,YAFJ;AAG1BP,MAAAA,YAAY,EAAEQ,SAAS,CAACR;AAHE,KAAN,CAAV,CAAX;AAMAU,IAAAA,OAAO,CAACjB,OAAR,CAAgBkB,aAAhB,GAAiC,UAASf,QAAQ,CAACU,IAAT,CAAcC,YAAa,EAArE;AACA,WAAOG,OAAP;AACA,GApBD;AAsBA7B,EAAAA,KAAK,CAACc,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgCD,QAAQ,IAAIA,QAA5C,EAAsDE,KAAK,IAAI;AAC9D,UAAMc,MAAM,GAAGd,KAAK,CAACF,QAAN,GAAiBE,KAAK,CAACF,QAAN,CAAegB,MAAhC,GAAyC,IAAxD;;AAEA,QAAIA,MAAM,KAAK,GAAf,EAAoB;AAEnB,aAAOZ,YAAY,CAACa,KAAD,EAAQC,CAAC,IAAI;AAC/BhB,QAAAA,KAAK,CAACC,MAAN,CAAaN,OAAb,CAAqB,eAArB,IAAwC,YAAYoB,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBC,KAArE;AACAnB,QAAAA,KAAK,CAACC,MAAN,CAAaX,OAAb,GAAuB8B,SAAvB;AACA,eAAOC,KAAK,CAACT,OAAN,CAAcZ,KAAK,CAACC,MAApB,CAAP;AACA,OAJkB,CAAnB;AAKA;;AAED,WAAOqB,OAAO,CAACC,MAAR,CAAevB,KAAf,CAAP;AACA,GAbD;AAeG,SAAOR,aAAP;AACH,CApFD;;GAAML,e;;AAsFN,eAAeA,eAAf","sourcesContent":["import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nconst useRefreshToken = () => {\n\n    const { userAuth, setUserAuth } = useContext(AuthContext);\n\n\tconst baseURL = \"http://localhost:8080/api\";\n\tconst refreshURL = `${baseURL}/users/token/refresh`; \n\n\tconst axiosInstance = axios.create({\n\t\tbaseURL: baseURL,\n\t\ttimeout: 10000,\n\t\theaders: { 'Authorization': `Bearer ${userAuth.accessToken}`}\n\t});\n\n\t// axiosInstance.interceptors.request.use(async request => {\n\n\t// \tconst decodedToken = jwt_decode(userAuth.accessToken);\n\t// \tconst tokenExpirationDate = decodedToken.exp;\n\t// \tconst currentTime = new Date().getTime() / 1000;\n\t\n\t// \tconst isValid = tokenExpirationDate > currentTime;\n\t\n\t// \tif (isValid) return request;\n\n\t// \tconst config = {\n\t// \t\theaders: {\n\t// \t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t// \t\t}\n\t// \t}\n\n\t// \tconst response = await axios.get(refreshURL, config);\n\t\t\t\t\n\t// \twindow.localStorage.setItem(\"access_token\", response.data.access_token);\n\n\t// \tsetUserAuth(prevState => ( {\n\t// \t\tusername: prevState.username,\n\t// \t\taccessToken: response.data.access_token,\n\t// \t\trefreshToken: prevState.refreshToken\n\t// \t}));\n\t\t\n\t// \trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t// \treturn request;\n\n\t// }, error => {\n\t// \treturn Promise.reject(error);\n\t// });\n\n\taxios.interceptors.response.use( response => response, async error => {\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Authorization': `Bearer ${userAuth.refreshToken}`\n\t\t\t}\n\t\t}\n\n\t\tconst newResponse = await axios.get(`${baseURL}/api/users/token/refresh`, config);\n\t\t\t\t\t\n\t\twindow.localStorage.setItem(\"access_token\", newResponse.data.access_token);\n\n\t\tsetUserAuth(prevState => ( {\n\t\t\tusername: prevState.username,\n\t\t\taccessToken: newResponse.data.access_token,\n\t\t\trefreshToken: prevState.refreshToken\n\t\t}));\n\t\t\t\n\t\trequest.headers.Authorization = `Bearer ${response.data.access_token}`;\n\t\treturn request;\n\t});\n\n\taxios.interceptors.response.use(response => response, error => {\n\t\tconst status = error.response ? error.response.status : null\n\t\n\t\tif (status === 401) {\n\t\n\t\t\treturn refreshToken(store, _ => {\n\t\t\t\terror.config.headers['Authorization'] = 'Bearer ' + store.state.auth.token;\n\t\t\t\terror.config.baseURL = undefined;\n\t\t\t\treturn Axios.request(error.config);\n\t\t\t});\n\t\t}\n\t\n\t\treturn Promise.reject(error);\n\t})\n    \n    return axiosInstance;\n}\n\nexport default useRefreshToken;"]},"metadata":{},"sourceType":"module"}